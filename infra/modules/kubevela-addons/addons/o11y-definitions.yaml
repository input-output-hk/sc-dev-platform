apiVersion: core.oam.dev/v1beta1
kind: Application
metadata:
  annotations:
    addon.oam.dev/componentDefinitions: grafana-access,grafana-datasource,grafana-dashboard
    addon.oam.dev/traitDefinitions: grafana-dashboard
    addon.oam.dev/workflowStepDefinitions: install-datasource-from-addon,install-datasource-from-config,install-kubernetes-api-datasource,import-grafana-dashboard
  creationTimestamp: null
  labels:
    addons.oam.dev/name: o11y-definitions
    addons.oam.dev/registry: KubeVela
    addons.oam.dev/version: v0.2.6
  name: addon-o11y-definitions
  namespace: vela-system
spec:
  components: []
---
apiVersion: core.oam.dev/v1beta1
kind: TraitDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: The dashboard for grafana.
  labels: {}
  name: grafana-dashboard
  namespace: vela-system
spec:
  appliesToWorkloads:
  - '*'
  schematic:
    cue:
      template: "import (\n\t\"encoding/json\"\n)\n\nparameter: {\n\t// +usage=The
        name of the grafana instance.\n\tgrafana: *\"default\" | string\n\t// +usage=The
        uid of the grafana dashboard, if not specified, the default uid will be used.\n\tuid?:
        string\n\t// +usage=The title of the grafana dashboard, if not specified,
        the default title will be used.\n\ttitle?: string\n\t// +usage=The json model
        of the grafana dashboard\n\tdata: string\n}\nsource: json.Unmarshal(parameter.data)\noverrides:
        {\n\tuid: string\n\tif parameter.uid != _|_ {\n\t\tuid: parameter.uid\n\t}\n\tif
        parameter.uid == _|_ {\n\t\tuid: source.uid\n\t}\n\n\ttitle: string\n\tif
        parameter.title != _|_ {\n\t\ttitle: parameter.title\n\t}\n\tif parameter.title
        == _|_ {\n\t\ttitle: source.title\n\t}\n\n\tvarList: *[] | [...{...}]\n\tvarMap:
        \ *{} | {...}\n\tif source.templating != _|_ && source.templating.list !=
        _|_ {\n\t\tvarList: source.templating.list\n\t\tvarMap: {for v in source.templating.list
        {\n\t\t\t\"\\(v.name)\": v\n\t\t}}\n\t}\n\n\textList: *[] | [...{...}]\n\tif
        source[\"__inputs\"] != _|_ {\n\t\textList: [ for input in source[\"__inputs\"]
        if input.type == \"datasource\" && varMap[input.name] == _|_ {\n\t\t\tname:
        \   input.name\n\t\t\ttype:    input.type\n\t\t\tlabel:   input.label\n\t\t\tquery:
        \  input.pluginId\n\t\t\trefresh: 1\n\t\t\thide:    0\n\t\t}]\n\t}\n\n\ttemplating:
        list: varList + extList\n}\nmodel: {\n\tfor k, v in source {\n\t\tif k !=
        \"uid\" && k != \"title\" && k != \"__inputs\" && k != \"__requires\" && k
        != \"templating\" && k != \"__elements\" && k != \"id\" && k != \"version\"
        {\n\t\t\t\"\\(k)\": v\n\t\t}\n\t}\n\tuid:        overrides.uid\n\ttitle:      overrides.title\n\ttemplating:
        overrides.templating\n}\noutputs: \"grafana-dashboard-\\(model.uid)-\\(parameter.grafana)\":
        {\n\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\tkind:       \"GrafanaDashboard\"\n\tmetadata:
        name: \"\\(model.uid)@\\(parameter.grafana)\"\n\tspec: model\n}\n"
---
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: The access credential for grafana.
  labels: {}
  name: grafana-access
  namespace: vela-system
spec:
  podDisruptive: false
  schematic:
    cue:
      template: "parameter: {\n\t// +usage=The name of the grafana instance.\n\tname:
        string\n\t// +usage=The endpoint of the grafana instance.\n\tendpoint: string\n\t//
        +usage=The username for access grafana\n\tusername?: string\n\t// +usage=The
        password for access grafana\n\tpassword?: string\n\t// +usage=The usage for
        access grafana\n\ttoken?: string\n}\noutput: {\n\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\tkind:
        \      \"Grafana\"\n\tmetadata: name: parameter.name\n\tmetadata: annotations:
        \"app.oam.dev/last-applied-configuration\": \"-\"\n\tspec: {\n\t\tendpoint:
        parameter.endpoint\n\t\taccess: {\n\t\t\tif parameter.username != _|_ && parameter.password
        != _|_ {\n\t\t\t\tusername: parameter.username\n\t\t\t\tpassword: parameter.password\n\t\t\t}\n\t\t\tif
        parameter.token != _|_ {\n\t\t\t\ttoken: parameter.token\n\t\t\t}\n\t\t}\n\t}\n}\n"
  workload:
    type: autodetects.core.oam.dev
---
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: The datasource for grafana.
  labels: {}
  name: grafana-datasource
  namespace: vela-system
spec:
  podDisruptive: false
  schematic:
    cue:
      template: "import (\n\t\"encoding/json\"\n)\n\nparameter: {\n\t// +usage=The
        name of the grafana instance.\n\tgrafana: *\"default\" | string\n\t// +usage=The
        uid of the grafana datasource.\n\tuid: string\n\t// +usage=The json model
        of the grafana datasource\n\tdata: string\n}\noutput: {\n\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\tkind:
        \      \"GrafanaDatasource\"\n\tmetadata: name: \"\\(parameter.uid)@\\(parameter.grafana)\"\n\tspec:
        json.Unmarshal(parameter.data)\n}\n"
  workload:
    type: autodetects.core.oam.dev
---
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: Discover datasource from addon for grafana.
  labels:
    custom.definition.oam.dev/ui-hidden: "true"
  name: install-datasource-from-addon
  namespace: vela-system
spec:
  podDisruptive: false
  schematic:
    cue:
      template: "import (\n\t\"vela/op\"\n\t\"vela/ql\"\n\t\"strconv\"\n)\n\nresources:
        ql.#CollectServiceEndpoints & {\n\tapp: {\n\t\tname:      parameter.addonName\n\t\tnamespace:
        parameter.addonNamespace\n\t\tfilter: {}\n\t}\n} @step(1)\nstatus: {\n\tendpoints:
        *[] | [...{...}]\n\tif resources.err == _|_ && resources.list != _|_ {\n\t\t_endpoints:
        [ for ep in resources.list if ep.endpoint.portName != _|_ {ep}]\n\t\tendpoints:
        [ for ep in _endpoints if ep.endpoint.portName == parameter.portName {\n\t\t\tname:
        \   \"\\(parameter.type):\\(ep.cluster)\"\n\t\t\tportStr: strconv.FormatInt(ep.endpoint.port,
        10)\n\t\t\turl:     \"http://\\(ep.endpoint.host):\\(portStr)\"\n\t\t}]\n\t}\n}\napplyDatasources:
        op.#Steps & {\n\tfor ep in status.endpoints {\n\t\t\"apply-\\(ep.name)\":
        op.#Apply & {\n\t\t\tvalue: {\n\t\t\t\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\t\t\t\tkind:
        \      \"GrafanaDatasource\"\n\t\t\t\tmetadata: name: \"\\(ep.name)@\\(parameter.grafana)\"\n\t\t\t\tspec:
        {\n\t\t\t\t\ttype:   parameter.type\n\t\t\t\t\tname:   ep.name\n\t\t\t\t\turl:
        \   ep.url\n\t\t\t\t\taccess: \"proxy\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}
        @step(2)\nparameter: {\n\ttype:           *\"prometheus\" | string\n\taddonName:
        \     *\"addon-prometheus-server\" | string\n\taddonNamespace: *\"vela-system\"
        | string\n\tportName:       *\"http\" | string\n\tgrafana:        *\"default\"
        | string\n}\n"
---
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: Discover datasource from the config system for
      grafana.
  labels: {}
  name: install-datasource-from-config
  namespace: vela-system
spec:
  podDisruptive: false
  schematic:
    cue:
      template: "import (\n\t\"vela/op\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nresources:
        op.#ListConfig & {\n\t\t\ttemplate:  parameter.type\n\t\t\tnamespace: \"vela-system\"\n}
        \                @step(1)\napplyDatasources: op.#Steps & {\n\tfor config in
        resources.configs {\n\t\tif config.config != _|_ && config.config.url != _|_
        {\n\t\t\t\"apply-\\(config.name)\": op.#Apply & {\n\t\t\t\tvalue: {\n\t\t\t\t\tapiVersion:
        \"o11y.prism.oam.dev/v1alpha1\"\n\t\t\t\t\tkind:       \"GrafanaDatasource\"\n\t\t\t\t\t_name:
        \     strings.Replace(config.name, \"-\", \"_\", -1)\n\t\t\t\t\tmetadata:
        name: \"\\(_name)@\\(parameter.grafana)\"\n\t\t\t\t\tspec: {\n\t\t\t\t\t\tif
        parameter.type == \"prometheus-server\" {\n\t\t\t\t\t\t\tif config.config.auth
        != _|_ {\n\t\t\t\t\t\t\t\tuser:     config.config.auth.username\n\t\t\t\t\t\t\t\tpassword:
        config.config.auth.password\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttype: \"prometheus\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif
        parameter.type == \"loki\" {\n\t\t\t\t\t\t\ttype: \"loki\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\taccess:
        \"proxy\"\n\t\t\t\t\t\turl:    config.config.url\n\t\t\t\t\t\tname:   config.name\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}
        @step(2)\nparameter: {\n\ttype:    *\"prometheus-server\" | \"loki\" | string\n\tgrafana:
        *\"default\" | string\n}\n"
---
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: Create Kubernetes API datasource.
  labels:
    custom.definition.oam.dev/ui-hidden: "true"
  name: install-kubernetes-api-datasource
  namespace: vela-system
spec:
  podDisruptive: false
  schematic:
    cue:
      template: "import (\n\t\"vela/op\"\n\t\"encoding/base64\"\n)\n\nreadSA: op.#Apply
        & {\n\tvalue: {\n\t\tapiVersion: \"v1\"\n\t\tkind:       \"ServiceAccount\"\n\t\tmetadata:
        {\n\t\t\tname:      parameter.serviceAccountName\n\t\t\tnamespace: parameter.namespace\n\t\t}\n\t}\n}
        \            @step(1)\ncreateSecret: op.#Apply & {\n\tvalue: {\n\t\tapiVersion:
        \"v1\"\n\t\tkind:       \"Secret\"\n\t\tmetadata: {\n\t\t\tname:      parameter.serviceAccountName
        + \"-autogen\"\n\t\t\tnamespace: parameter.namespace\n\t\t\tannotations: \"kubernetes.io/service-account.name\":
        parameter.serviceAccountName\n\t\t}\n\t\ttype: \"kubernetes.io/service-account-token\"\n\t}\n}
        \         @step(2)\ngetSecret: op.#Read & {\n\tvalue: {\n\t\tapiVersion: \"v1\"\n\t\tkind:
        \      \"Secret\"\n\t\tmetadata: {\n\t\t\tname:      parameter.serviceAccountName
        + \"-autogen\"\n\t\t\tnamespace: parameter.namespace\n\t\t}\n\t}\n}     @step(3)\nwait:
        op.#ConditionalWait & {\n\tcontinue: *false | bool\n\tif readSA.value.secrets
        != _|_ {\n\t\tif len(readSA.value.secrets) > 0 {\n\t\t\tcontinue: true\n\t\t}\n\t}\n\tif
        getSecret.value.data != _|_ {\n\t\tif getSecret.value.data.token != _|_ {\n\t\t\tcontinue:
        true\n\t\t}\n\t}\n}     @step(4)\nread: op.#Read & {\n\tvalue: {\n\t\tapiVersion:
        \"v1\"\n\t\tkind:       \"Secret\"\n\t\tmetadata: {\n\t\t\tif getSecret.value.data
        == _|_ || getSecret.value.data.token == _|_ {\n\t\t\t\tname: readSA.value.secrets[0].name\n\t\t\t}\n\t\t\tif
        getSecret.value.data != _|_ && getSecret.value.data.token != _|_ {\n\t\t\t\tname:
        parameter.serviceAccountName + \"-autogen\"\n\t\t\t}\n\t\t\tnamespace: parameter.namespace\n\t\t}\n\t}\n}
        \      @step(5)\ndecode: op.#Steps & {\n\ttoken:     base64.Decode(null, read.value.data.token)\n\tconvert:
        \  op.#ConvertString & {bt: token}\n\tkubeToken: convert.str\n}       @step(6)\noutput:
        op.#Apply & {\n\tvalue: {\n\t\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\t\tkind:
        \      \"GrafanaDatasource\"\n\t\tmetadata: name: \"\\(parameter.uid)@\\(parameter.grafana)\"\n\t\tspec:
        {\n\t\t\ttype:            \"marcusolsson-json-datasource\"\n\t\t\tname:            \"KubernetesAPIServer\"\n\t\t\turl:
        \            parameter.endpoint\n\t\t\taccess:          \"proxy\"\n\t\t\tuid:
        \            \"kubernetes-api\"\n\t\t\twithCredentials: true\n\t\t\tjsonData:
        {\n\t\t\t\ttlsSkipVerify:   true\n\t\t\t\thttpHeaderName1: \"Authorization\"\n\t\t\t}\n\t\t\tsecureJsonData:
        httpHeaderValue1: \"Bearer \\(decode.kubeToken)\"\n\t\t}\n\t}\n} @step(7)\nparameter:
        {\n\tserviceAccountName: *\"grafana\" | string\n\tnamespace:          *\"o11y-system\"
        | string\n\tuid:                *\"kubernetes-api\" | string\n\tgrafana:            *\"default\"
        | string\n\tendpoint:           *\"https://kubernetes.default\" | string\n}\n"
---
apiVersion: core.oam.dev/v1beta1
kind: WorkflowStepDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: Import dashboard to grafana.
  labels: {}
  name: import-grafana-dashboard
  namespace: vela-system
spec:
  schematic:
    cue:
      template: "import (\n\t\"encoding/json\"\n\t\"vela/op\"\n)\n\nloadData: op.#Steps
        & {\n\tdata: string\n\tif parameter.data != _|_ {\n\t\tdata: parameter.data\n\t}\n\tif
        parameter.data == _|_ && parameter.url != _|_ {\n\t\tr: op.#HTTPGet & {\n\t\t\turl:
        parameter.url\n\t\t}     @step(1)\n\t\tdata: r.response.body @step(2)\n\t}\n}
        \      @step(1)\nsource: json.Unmarshal(loadData.data) @step(2)\noverrides:
        {\n\tuid: string\n\tif parameter.uid != _|_ {\n\t\tuid: parameter.uid\n\t}\n\tif
        parameter.uid == _|_ {\n\t\tuid: source.uid\n\t}\n\n\ttitle: string\n\tif
        parameter.title != _|_ {\n\t\ttitle: parameter.title\n\t}\n\tif parameter.title
        == _|_ {\n\t\ttitle: source.title\n\t}\n\n\tvarList: *[] | [...{...}]\n\tvarMap:
        \ *{} | {...}\n\tif source.templating != _|_ && source.templating.list !=
        _|_ {\n\t\tvarList: source.templating.list\n\t\tvarMap: {for v in source.templating.list
        {\n\t\t\t\"\\(v.name)\": v\n\t\t}}\n\t}\n\n\textList: *[] | [...{...}]\n\tif
        source[\"__inputs\"] != _|_ {\n\t\textList: [ for input in source[\"__inputs\"]
        if input.type == \"datasource\" && varMap[input.name] == _|_ {\n\t\t\tname:
        \   input.name\n\t\t\ttype:    input.type\n\t\t\tlabel:   input.label\n\t\t\tquery:
        \  input.pluginId\n\t\t\trefresh: 1\n\t\t\thide:    0\n\t\t}]\n\t}\n\n\ttemplating:
        list: varList + extList\n} @step(3)\nmodel: {\n\tfor k, v in source {\n\t\tif
        k != \"uid\" && k != \"title\" && k != \"__inputs\" && k != \"__requires\"
        && k != \"templating\" && k != \"__elements\" && k != \"id\" && k != \"version\"
        {\n\t\t\t\"\\(k)\": v\n\t\t}\n\t}\n\tuid:        overrides.uid\n\ttitle:      overrides.title\n\ttemplating:
        overrides.templating\n} @step(4)\napply: op.#Apply & {\n\tvalue: {\n\t\tapiVersion:
        \"o11y.prism.oam.dev/v1alpha1\"\n\t\tkind:       \"GrafanaDashboard\"\n\t\tmetadata:
        name: \"\\(model.uid)@\\(parameter.grafana)\"\n\t\tspec: model\n\t}\n} @step(5)\nparameter:
        {\n\t// +usage=The name of the grafana instance.\n\tgrafana: *\"default\"
        | string\n\t// +usage=The json model of the grafana dashboard.\n\tdata?: string\n\t//
        +usage=The url link of the grafana dashboard.\n\turl?: string\n\t// +usage=The
        uid of the grafana dashboard, if not specified, the default uid will be used.\n\tuid?:
        string\n\t// +usage=The title of the grafana dashboard, if not specified,
        the default title will be used.\n\ttitle?: string\n}\n"
---
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/alias: ""
    definition.oam.dev/description: The dashboard for grafana.
  labels: {}
  name: grafana-dashboard
  namespace: vela-system
spec:
  podDisruptive: false
  schematic:
    cue:
      template: "import (\n\t\"encoding/json\"\n)\n\nparameter: {\n\t// +usage=The
        name of the grafana instance.\n\tgrafana: *\"default\" | string\n\t// +usage=The
        uid of the grafana dashboard.\n\tuid: string\n\t// +usage=The json model of
        the grafana dashboard\n\tdata: string\n}\noutput: {\n\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\tkind:
        \      \"GrafanaDashboard\"\n\tmetadata: name: \"\\(parameter.uid)@\\(parameter.grafana)\"\n\tspec:
        json.Unmarshal(parameter.data)\n}\n"
  workload:
    type: autodetects.core.oam.dev
---
apiVersion: v1
data:
  expanded-writer: |
    nacos: null
  schema: |
    properties:
      url:
        description: the Prometheus server address
        title: url
        type: string
    required:
    - url
    type: object
  template: "metadata: {\n\tname:        \"loki\"\n\talias:       \"Loki\"\n\tdescription:
    \"Config the Loki connectors\"\n\tsensitive:   false\n\tscope:       \"system\"\n}\n\ntemplate:
    {\n\tparameter: {\n\t\t// +usage=the Prometheus server address\n\t\turl: string\n\t}\n}\n\n\n\tcontext:
    {\n\t\tname: string\n\t\tnamespace: string\n\t}\n"
kind: ConfigMap
metadata:
  annotations:
    config.oam.dev/alias: Loki
    config.oam.dev/description: ""
    config.oam.dev/sensitive: "false"
  creationTimestamp: null
  labels:
    config.oam.dev/catalog: velacore-config
    config.oam.dev/scope: system
  name: config-template-loki
  namespace: vela-system
---
apiVersion: v1
data:
  expanded-writer: |
    nacos: null
  schema: |
    properties:
      auth:
        description: the Auth config for the Grafana
        properties:
          password:
            description: The password for access grafana
            title: password
            type: string
          token:
            description: The usage for access grafana
            title: token
            type: string
          username:
            description: The username for access grafana
            title: username
            type: string
        title: auth
        type: object
      endpoint:
        description: The endpoint of the grafana instance.
        title: endpoint
        type: string
    required:
    - endpoint
    type: object
  template: "metadata: {\n\tname:        \"grafana\"\n\talias:       \"Grafana\"\n\tdescription:
    \"Config the grafana server connectors\"\n\tsensitive:   false\n\tscope:       \"system\"\n}\n\ntemplate:
    {\n\toutputs: {\n\t\t\"grafana\": {\n\t\t\tapiVersion: \"o11y.prism.oam.dev/v1alpha1\"\n\t\t\tkind:
    \      \"Grafana\"\n\t\t\tmetadata: {\n\t\t\t\tname: context.name\n\t\t\t}\n\t\t\tspec:
    {\n\t\t\t\tendpoint: parameter.endpoint\n\t\t\t\tif parameter.auth != _|_ {\n\t\t\t\t\taccess:
    {\n\t\t\t\t\t\tif parameter.auth.username != _|_ && parameter.auth.password !=
    _|_ {\n\t\t\t\t\t\t\tusername: parameter.auth.username\n\t\t\t\t\t\t\tpassword:
    parameter.auth.password\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif parameter.auth.token !=
    _|_ {\n\t\t\t\t\t\t\ttoken: parameter.auth.token\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tparameter:
    {\n\t\t// +usage=The endpoint of the grafana instance.\n\t\tendpoint: string\n\t\t//
    +usage=the Auth config for the Grafana\n\t\tauth?: {\n\t\t\t// +usage=The username
    for access grafana\n\t\t\tusername?: string\n\t\t\t// +usage=The password for
    access grafana\n\t\t\tpassword?: string\n\t\t\t// +usage=The usage for access
    grafana\n\t\t\ttoken?: string\n\t\t}\n\t}\n}\n\n\n\tcontext: {\n\t\tname: string\n\t\tnamespace:
    string\n\t}\n"
kind: ConfigMap
metadata:
  annotations:
    config.oam.dev/alias: Grafana
    config.oam.dev/description: ""
    config.oam.dev/sensitive: "false"
  creationTimestamp: null
  labels:
    config.oam.dev/catalog: velacore-config
    config.oam.dev/scope: system
  name: config-template-grafana
  namespace: vela-system
---
apiVersion: v1
data:
  expanded-writer: |
    nacos: null
  schema: |
    properties:
      auth:
        description: the Auth config for the Prometheus
        properties:
          password:
            title: password
            type: string
          username:
            title: username
            type: string
        required:
        - username
        - password
        title: auth
        type: object
      url:
        description: the Prometheus server address
        title: url
        type: string
    required:
    - url
    type: object
  template: "metadata: {\n\tname:        \"prometheus-server\"\n\talias:       \"Prometheus
    Server\"\n\tdescription: \"Config the Prometheus server connectors\"\n\tsensitive:
    \  false\n\tscope:       \"system\"\n}\n\ntemplate: {\n\tparameter: {\n\t\t//
    +usage=the Prometheus server address\n\t\turl: string\n\t\t// +usage=the Auth
    config for the Prometheus\n\t\tauth?: {\n\t\t\tusername: string\n\t\t\tpassword:
    string\n\t\t}\n\t}\n}\n\n\n\tcontext: {\n\t\tname: string\n\t\tnamespace: string\n\t}\n"
kind: ConfigMap
metadata:
  annotations:
    config.oam.dev/alias: Prometheus Server
    config.oam.dev/description: ""
    config.oam.dev/sensitive: "false"
  creationTimestamp: null
  labels:
    config.oam.dev/catalog: velacore-config
    config.oam.dev/scope: system
  name: config-template-prometheus-server
  namespace: vela-system
---
apiVersion: v1
data:
  ui-schema: '[{"jsonKey":"auth","sort":200,"subParameters":[{"jsonKey":"username","sort":10},{"jsonKey":"password","sort":20,"uiType":"Password"}]}]'
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: config-uischema-prometheus-server
  namespace: vela-system
---
apiVersion: v1
data:
  ui-schema: '[{"jsonKey":"auth","sort":200,"subParameters":[{"jsonKey":"username","sort":10},{"jsonKey":"password","sort":20,"uiType":"Password"},{"jsonKey":"token","sort":30,"uiType":"Password"}]}]'
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: config-uischema-grafana
  namespace: vela-system
